@page "{id:int}"
@inject ForumApiService ForumApi
@using Microsoft.AspNetCore.Identity

@using No_Forum.Models 
@model No_Forum.Pages.ContentPageViewerModel
@{
    var currentUserId = User.Identity?.IsAuthenticated == true
        ? Model.AllUsers.FirstOrDefault(u => u.UserName == User.Identity.Name)?.Id
        : null;
}

<style>
    .ad-side {
        width: 160px;
        min-height: 600px;
        margin: 0 10px;
        position: sticky;
        top: 20px;
    }

    .ad-img {
        width: 100%;
        height: auto;
        border-radius: 8px;
        margin-bottom: 10px;
    }

    .main-content {
        flex: 1;
    }

    .ad-row {
        display: flex;
        justify-content: center;
        align-items: flex-start;
    }
</style>

<div class="ad-row">
    <div class="ad-side" id="ad-left"></div>
    <div class="main-content">
<p>@Model.Post?.Text</p>
@if (!string.IsNullOrEmpty(Model.Post?.ImagePath))
{
    <img src="@Model.Post.ImagePath" alt="Post image" style="max-width:100%; height:auto;" />
}

<h3>Comments</h3>
@if (Model.PostComments != null && Model.PostComments.Any())
{
    <ul>
        @foreach (var comment in Model.PostComments)
        {
                    var commenter = Model.AllUsers.FirstOrDefault(u => u.UserName == comment.CreatedBy);
                    var commenterId = commenter?.Id;
                    var commenterUserName = comment.CreatedBy;
                    var pfp = !string.IsNullOrEmpty(commenterUserName)
                    ? Model.AllPFPs.FirstOrDefault(p => p.UserName == commenterUserName)
                    : null;


            var alreadyFriend = commenterId != null && Model.MyFriends.Any(f => f.FriendUserId == commenterId);
            var isSelf = commenterId == currentUserId;

            <li>
                <img src="@Url.Content($"~/img/pfp/{(pfp != null && !string.IsNullOrEmpty(pfp.ProfilePicturePath) ? pfp.ProfilePicturePath : "default.png")}")" alt="Profile Picture" style="width:32px;height:32px;border-radius:50%;object-fit:cover;vertical-align:middle;margin-right:8px;" />

                <strong>@(comment.CreatedBy ?? "Anonymous")</strong>
                @if (User.Identity?.IsAuthenticated == true && commenterId != null && !alreadyFriend && !isSelf)
                {
                    <form method="post" asp-page-handler="AddFriend" style="display:inline;">
                        <input type="hidden" name="friendUserId" value="@commenterId" />
                        <button type="submit" class="btn btn-link btn-sm">Follow</button>
                    </form>
                }
                <span class="text-muted" style="font-size:small;">
                    @comment.CreatedAt.ToLocalTime()
                </span>
                <div>@comment.Text</div>

                        <form method="post" asp-page-handler="ToggleCommentFlagged" asp-route-commentId="@comment.Id" style="display:inline;" class="report-form">
                            <button type="submit" class="btn btn-link btn-sm">
                                @(comment.Flagged ? "Unreport" : "Report")
                            </button>
                        </form>


            </li>
        }
    </ul>
}
else
{
    <p>No comments yet.</p>
}

<form method="post">
    <textarea asp-for="NewCommentText" rows="3" cols="50"></textarea>
    <br />
    <button type="submit">Add Comment</button>
</form>
    </div>
    <div class="ad-side" id="ad-right"></div>
</div>
@section Scripts {
    <script>
        async function loadAdImages() {
            // Use the Azure API Management link for better security and control
                    const apiUrl = 'https://noapi.azure-api.net/api/Images/random';
            try {
                const [leftRes, rightRes] = await Promise.all([
                    fetch(apiUrl),
                    fetch(apiUrl)
                ]);
                // Parse as JSON, not text
                const leftImg = await leftRes.json();
                const rightImg = await rightRes.json();

                document.getElementById('ad-left').innerHTML =
                    `<img src="${leftImg.imageUrl}" class="ad-img" alt="Ad">`;
                document.getElementById('ad-right').innerHTML =
                    `<img src="${rightImg.imageUrl}" class="ad-img" alt="Ad">`;
            } catch (e) {
                document.getElementById('ad-left').innerText = "Ad failed to load";
                document.getElementById('ad-right').innerText = "Ad failed to load";
            }
            document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.report-form').forEach(function (form) {
                form.addEventListener('submit', async function (e) {
                    e.preventDefault();
                    const formData = new FormData(form);
                    const action = form.getAttribute('action') || window.location.pathname;
                    const method = form.getAttribute('method') || 'post';

                    const response = await fetch(action, {
                        method: method.toUpperCase(),
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (response.ok) {
                        // Optionally update the UI, e.g. toggle button text
                        // location.reload(); // Or update the comment flagged state dynamically
                    } else {
                        alert('Failed to report comment.');
                    }
                });
            });
        });
        }
        loadAdImages();
    </script>
}